import { useState, useEffect } from "react";
import { FiEdit, FiTrash, FiPlus, FiDownload } from "react-icons/fi";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Sidebar from "./EmpSidebar";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

export default function EmpLogs() {
  const [logs, setLogs] = useState([]);
  const [newLog, setNewLog] = useState(null);
  const [editingLog, setEditingLog] = useState(null);
  const [loading, setLoading] = useState(false);

  const currentUser = { name: "Jane Doe", role: "user" };
  const isAdmin = () => currentUser.role === "admin";

  useEffect(() => {
    fetchLogs();
  }, []);

  const fetchLogs = async () => {
    setLoading(true);
    try {
      const res = await fetch("/api/logs");
      const data = await res.json();
      setLogs(data);
    } catch (error) {
      console.error("Failed to fetch logs:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddLog = () => {
    setNewLog({
      date: new Date(),
      location: "",
      waste: { plastic: 0, paper: 0, food: 0, general: 0, recyclable: 0 },
      status: "pending",
    });
  };

  const handleSaveLog = async () => {
    try {
      const res = await fetch("/api/logs", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newLog),
      });
      const savedLog = await res.json();
      setLogs([...logs, savedLog]);
      setNewLog(null);
    } catch (error) {
      console.error("Failed to save new log:", error);
    }
  };

  const handleEditLog = (log) => {
    setEditingLog({ ...log });
  };

  const handleUpdateLog = async () => {
    try {
      const res = await fetch(`/api/logs/${editingLog._id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(editingLog),
      });
      const updated = await res.json();
      setLogs(logs.map((log) => (log._id === updated._id ? updated : log)));
      setEditingLog(null);
    } catch (error) {
      console.error("Failed to update log:", error);
    }
  };

  const handleDeleteLog = async (id) => {
    if (!isAdmin()) return;
    try {
      await fetch(`/api/logs/${id}`, { method: "DELETE" });
      setLogs(logs.filter((log) => log._id !== id));
    } catch (error) {
      console.error("Failed to delete log:", error);
    }
  };

  const generatePDF = (log) => {
    const doc = new jsPDF();

    doc.setFontSize(16);
    doc.text("Waste Log Ticket", 14, 20);
    doc.setFontSize(12);
    doc.text(`Generated by: ${currentUser.name}`, 14, 30);
    doc.text(`Date: ${new Date(log.date).toLocaleDateString()}`, 14, 38);

    autoTable(doc, {
      startY: 50,
      head: [["Field", "Value"]],
      body: [
        ["Location", log.location],
        ["Plastic", log.waste.plastic],
        ["Paper", log.waste.paper],
        ["Food", log.waste.food],
        ["General", log.waste.general],
        ["Recyclable", log.waste.recyclable],
        ["Status", log.status],
      ],
    });

    doc.save(`waste-log-${log._id}.pdf`);
  };

  return (
    <div className="min-h-screen bg-green-50 text-gray-800 flex">
      <Sidebar currentUser={currentUser} />

      <main className="flex-1 p-6">
        <header className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-semibold">Waste Logs</h2>
          <button
            onClick={handleAddLog}
            className="bg-green-600 text-white px-4 py-2 rounded flex items-center gap-2"
          >
            <FiPlus /> Add New Log
          </button>
        </header>

        <div className="bg-white p-6 rounded shadow-md overflow-x-auto">
          {loading ? (
            <p>Loading logs...</p>
          ) : (
            <table className="w-full border border-gray-300 text-sm">
              <thead className="bg-gray-100">
                <tr>
                  <th className="border p-2">#</th>
                  <th className="border p-2">Date</th>
                  <th className="border p-2">Location</th>
                  <th className="border p-2">Plastic</th>
                  <th className="border p-2">Paper</th>
                  <th className="border p-2">Food</th>
                  <th className="border p-2">General</th>
                  <th className="border p-2">Recyclable</th>
                  <th className="border p-2">Status</th>
                  <th className="border p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {logs.map((log, idx) => (
                  <tr key={log._id}>
                    <td className="border p-2 text-center">{idx + 1}</td>
                    <td className="border p-2">
                      {new Date(log.date).toLocaleDateString()}
                    </td>
                    <td className="border p-2">{log.location}</td>
                    <td className="border p-2">{log.waste.plastic}</td>
                    <td className="border p-2">{log.waste.paper}</td>
                    <td className="border p-2">{log.waste.food}</td>
                    <td className="border p-2">{log.waste.general}</td>
                    <td className="border p-2">{log.waste.recyclable}</td>
                    <td className="border p-2 capitalize">{log.status}</td>
                    <td className="border p-2 flex gap-2 justify-center">
                      <button
                        onClick={() => handleEditLog(log)}
                        className="text-blue-500"
                        title="Edit"
                      >
                        <FiEdit />
                      </button>
                      <button
                        onClick={() => generatePDF(log)}
                        className="text-green-600"
                        title="Download PDF"
                      >
                        <FiDownload />
                      </button>
                      {isAdmin() && (
                        <button
                          onClick={() => handleDeleteLog(log._id)}
                          className="text-red-500"
                          title="Delete"
                        >
                          <FiTrash />
                        </button>
                      )}
                    </td>
                  </tr>
                ))}

                {/* New Entry Row */}
                {newLog && (
                  <tr className="bg-green-50">
                    <td className="border p-2 text-center">New</td>
                    <td className="border p-2">
                      <DatePicker
                        selected={newLog.date}
                        onChange={(date) =>
                          setNewLog({ ...newLog, date })
                        }
                        className="border p-1 w-full"
                      />
                    </td>
                    <td className="border p-2">
                      <input
                        type="text"
                        value={newLog.location}
                        onChange={(e) =>
                          setNewLog({ ...newLog, location: e.target.value })
                        }
                        className="border p-1 w-full"
                      />
                    </td>
                    {["plastic", "paper", "food", "general", "recyclable"].map(
                      (type) => (
                        <td key={type} className="border p-2">
                          <input
                            type="number"
                            value={newLog.waste[type]}
                            onChange={(e) =>
                              setNewLog({
                                ...newLog,
                                waste: {
                                  ...newLog.waste,
                                  [type]: Number(e.target.value),
                                },
                              })
                            }
                            className="border p-1 w-full"
                          />
                        </td>
                      )
                    )}
                    <td className="border p-2 text-center">Pending</td>
                    <td className="border p-2 text-center">
                      <button
                        onClick={handleSaveLog}
                        className="bg-green-600 text-white px-3 py-1 rounded"
                      >
                        Save
                      </button>
                    </td>
                  </tr>
                )}

                {/* Edit Row */}
                {editingLog && (
                  <tr className="bg-yellow-50">
                    <td className="border p-2 text-center">Edit</td>
                    <td className="border p-2">
                      <DatePicker
                        selected={new Date(editingLog.date)}
                        onChange={(date) =>
                          setEditingLog({ ...editingLog, date })
                        }
                        className="border p-1 w-full"
                      />
                    </td>
                    <td className="border p-2">
                      <input
                        type="text"
                        value={editingLog.location}
                        onChange={(e) =>
                          setEditingLog({
                            ...editingLog,
                            location: e.target.value,
                          })
                        }
                        className="border p-1 w-full"
                      />
                    </td>
                    {["plastic", "paper", "food", "general", "recyclable"].map(
                      (type) => (
                        <td key={type} className="border p-2">
                          <input
                            type="number"
                            value={editingLog.waste[type]}
                            onChange={(e) =>
                              setEditingLog({
                                ...editingLog,
                                waste: {
                                  ...editingLog.waste,
                                  [type]: Number(e.target.value),
                                },
                              })
                            }
                            className="border p-1 w-full"
                          />
                        </td>
                      )
                    )}
                    <td className="border p-2 text-center capitalize">
                      {editingLog.status}
                    </td>
                    <td className="border p-2 text-center">
                      <button
                        onClick={handleUpdateLog}
                        className="bg-blue-600 text-white px-3 py-1 rounded"
                      >
                        Update
                      </button>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          )}
        </div>
      </main>
    </div>
  );
}
